/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import aQute.bnd.osgi.Constants

import static org.gradle.api.attributes.Bundling.EXTERNAL
import static org.gradle.api.attributes.Category.DOCUMENTATION
import static org.gradle.api.attributes.Usage.JAVA_RUNTIME

plugins {
  id 'org.ehcache.build.package'
  id 'org.ehcache.build.plugins.variant'
}

publishing.publications.withType(MavenPublication) {
  pom {
    name = 'Ehcache'
    description = 'End-user ehcache3 jar artifact'
  }
}

variants {
  variant('jakarta') {
    capability "org.ehcache:ehcache-jakarta:$version"
    capability "org.ehcache.modules:ehcache-api:$version"
    capability "org.ehcache.modules:ehcache-core:$version"
    capability "org.ehcache.modules:ehcache-impl:$version"
    capability "org.ehcache.modules:ehcache-107-jakarta:$version"
    capability "org.ehcache.modules:ehcache-107-provider:$version"
    capability "org.ehcache.modules:ehcache-xml-jakarta:$version"
    capability "org.ehcache.modules:ehcache-xml-provider:$version"
  }
}

configurations {
  [apiElements, runtimeElements].each {
    it.outgoing {
      capability "org.ehcache:ehcache:$version"
      capability "org.ehcache.modules:ehcache-api:$version"
      capability "org.ehcache.modules:ehcache-core:$version"
      capability "org.ehcache.modules:ehcache-impl:$version"
      capability "org.ehcache.modules:ehcache-107:$version"
      capability "org.ehcache.modules:ehcache-107-provider:$version"
      capability "org.ehcache.modules:ehcache-xml:$version"
      capability "org.ehcache.modules:ehcache-xml-provider:$version"
    }
  }

  commonContents {
    exclude group:'org.glassfish.jaxb'
    exclude group:'org.slf4j'
    exclude group:'javax.cache'
  }
  contents {
    exclude group:'javax.xml.bind'
  }
  jakartaContents {
    exclude group:'jakarta.xml.bind'
  }
}

dependencies {
  commonContents project(':ehcache-api')
  commonContents project(':ehcache-core')
  commonContents project(':ehcache-impl')

  commonApi "javax.cache:cache-api:$parent.jcacheVersion"
  commonImplementation "org.slf4j:slf4j-api:$parent.slf4jVersion"

  contents project(':ehcache-107')
  contents project(':ehcache-xml')
  runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:[2.2,3)'

  jakartaContents(project(':ehcache-107')) {
    capabilities {
      requireCapability 'org.ehcache.modules:ehcache-107-jakarta'
    }
  }
  jakartaContents(project(':ehcache-xml')) {
    capabilities {
      requireCapability 'org.ehcache.modules:ehcache-xml-jakarta'
    }
  }
  jakartaRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:[3,4)'
}

tasks.named('jakartaJar') {
  osgi {
    instruction Constants.BUNDLE_NAME, 'Ehcache 3'
    instruction Constants.BUNDLE_SYMBOLICNAME, 'org.ehcache'
    instruction Constants.BUNDLE_DESCRIPTION, 'Ehcache is an open-source caching library, compliant with the JSR-107 standard.'
    instruction Constants.BUNDLE_ACTIVATOR, 'org.ehcache.core.osgi.EhcacheActivator'
    instruction Constants.EXPORT_PACKAGE, '!org.ehcache.jsr107.tck, !org.ehcache.*.internal.*, org.ehcache.*'
    instruction Constants.IMPORT_PACKAGE, 'javax.cache.*;resolution:=optional, jdk.internal.vm.annotation;resolution:=optional, !javax.annotation, !sun.misc, jakarta.xml.bind*;version="[3,4)", *'
  }
}

tasks.named('jar') {
  osgi {
    instruction Constants.BUNDLE_NAME, 'Ehcache 3'
    instruction Constants.BUNDLE_SYMBOLICNAME, 'org.ehcache'
    instruction Constants.BUNDLE_DESCRIPTION, 'Ehcache is an open-source caching library, compliant with the JSR-107 standard.'
    instruction Constants.BUNDLE_ACTIVATOR, 'org.ehcache.core.osgi.EhcacheActivator'
    instruction Constants.EXPORT_PACKAGE, '!org.ehcache.jsr107.tck, !org.ehcache.*.internal.*, org.ehcache.*'
    instruction Constants.IMPORT_PACKAGE, 'javax.cache.*;resolution:=optional, jdk.internal.vm.annotation;resolution:=optional, !javax.annotation, !sun.misc, javax.xml.bind*;version="[2.2,3)", *'
  }
}

tasks.withType(Javadoc).matching({ name.equals('spiJavadoc') }).configureEach {
  exclude '**/core/**', '**/impl/**', '**/xml/**', '**/jsr107/**', '**/transactions/**', '**/management/**', '**/tck/**'
}

TaskProvider<Javadoc> spiJavadoc = tasks.register('spiJavadoc', Javadoc) {
  title = "$project.archivesBaseName $project.version API & SPI";
  source = tasks.javadoc.source
  setClasspath(tasks.javadoc.classpath)
  exclude "**/internal/**"
  setDestinationDir project.file("$project.buildDir/docs/spi-javadoc")
}

TaskProvider<Jar> spiJavadocJar = project.getTasks().register('spiJavadocJar', Jar) {
  from(spiJavadoc);
  getArchiveClassifier().set("spi-javadoc");
}
Configuration spiJavadocElements = project.getConfigurations().create("spiJavadocElements", config -> {
  config.setDescription("javadoc elements for SPI documentation.");
  config.attributes(attributes -> {
    attributes.attribute(Usage.USAGE_ATTRIBUTE, project.getObjects().named(Usage.class, JAVA_RUNTIME));
    attributes.attribute(Category.CATEGORY_ATTRIBUTE, project.getObjects().named(Category.class, DOCUMENTATION));
    attributes.attribute(Bundling.BUNDLING_ATTRIBUTE, project.getObjects().named(Bundling.class, EXTERNAL));
    attributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE, project.getObjects().named(DocsType.class, "spi-javadoc"));
  });
  config.getOutgoing().artifact(spiJavadocJar);
});

components.named('java', AdhocComponentWithVariants) {
  addVariantsFromConfiguration(spiJavadocElements) {}
}

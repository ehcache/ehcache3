/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.jvm.Jvm

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
  compatVersion = '3.4.0' // Replace with NOT_YET when baseline does not exit
  mnmCompatVersion = '5.3.1'
}

configurations {
  serverLibs
  compatKit
  compatServerLibs
}

dependencies {
  // not required by gradle but required by the IDE because 'dist' do not has any transitive dependencies
  testCompileOnly project(':clustered:client')
  testCompileOnly project(':clustered:common')
  testCompileOnly project(':impl')
  testCompileOnly project(':xml')
  testCompileOnly "org.terracotta.internal:client-runtime:$terracottaCoreVersion"
  testCompileOnly "org.terracotta:runnel:$terracottaPlatformVersion"

  testCompile project(':management')
  testCompile "org.terracotta.management.dist:mnm-nms:$parent.managementVersion"
  testCompile "org.terracotta.management.dist:mnm-nms-agent:$parent.managementVersion"
  testCompile "com.fasterxml.jackson.core:jackson-databind:2.8.0"
  testRuntime project(':clustered:clustered-dist')
  testRuntime project(':dist')

  testCompile (group:'org.terracotta.internal', name:'galvan-support', version: terracottaCoreVersion) {
    // galvan-support depends on junit 4.11 and version enforcement plugin won't allow that
    exclude group:'junit', module:'junit'
  }
  testCompile (group:'com.google.code.tempus-fugit', name:'tempus-fugit', version:'1.1') {
    exclude group:'junit', module:'junit'
    exclude group:'org.hamcrest', module:'hamcrest-core'
  }
  testCompile group: 'javax.cache', name: 'cache-api', version: jcacheVersion

  serverLibs ("org.terracotta.management.dist:mnm-server:$parent.managementVersion") {
    exclude group:'org.terracotta.management.dist', module:'mnm-common'
  }

  // Kit for compatibility tests
  compatKit group: 'org.ehcache', name: 'ehcache-clustered', version: compatVersion, classifier: 'kit', ext: 'zip'
  compatServerLibs ("org.terracotta.management.dist:mnm-server:$mnmCompatVersion") {
    exclude group:'org.terracotta.management.dist', module:'mnm-common'
  }

}

task unzipKit(type: Copy) {
  dependsOn project(':clustered:clustered-dist').distZip
  from zipTree(project(':clustered:clustered-dist').distZip.archivePath)
  into 'build/ehcache-kit'
}

task unzipCompatKit(type: Copy) {
  dependsOn configurations.compatKit
  from { // use of closure defers evaluation until execution time
    configurations.compatKit.collect { zipTree(it) }
  }
  into 'build/ehcache-kit-compat'
}

task copyServerLibs(type: Copy) {
  dependsOn unzipKit
  from project.configurations.serverLibs
  into "$unzipKit.destinationDir/${project(':clustered:clustered-dist').archivesBaseName}-$project.version-kit/server/plugins/lib"
}

task copyCompatServerLibs(type: Copy) {
  dependsOn unzipCompatKit
  from project.configurations.compatServerLibs
  into "$unzipCompatKit.destinationDir/${project(':clustered:clustered-dist').archivesBaseName}-$compatVersion-kit/server/plugins/lib"
}

compileTestJava {
  options.forkOptions.javaHome = Jvm.current().javaHome
}

test {
  dependsOn copyServerLibs
  if (testJava.javaVersion.isJava8Compatible()) {
    environment 'JAVA_HOME', testJava.javaHome
  } else {
    executable = Jvm.current().javaExecutable
    environment 'JAVA_HOME', Jvm.current().javaHome
  }
  //TC Server Cannot Parse Java 9 VM Version String
  if (testJava.javaVersion.isJava9Compatible()) {
    //environment 'JAVA_OPTS', '--add-modules java.xml.bind'
    environment 'JAVA_HOME', Jvm.current().javaHome
  }
  // If you want to see all mutations of the voltron monitoring tree, add to JAVA_OPTS: -Dorg.terracotta.management.service.monitoring.VoltronMonitoringService.DEBUG=true
  environment 'JAVA_OPTS', '-Dcom.tc.l2.lockmanager.greedy.locks.enabled=false'
  if (testJava.javaVersion.isJava9Compatible()) {
    jvmArgs += ['--add-modules', 'java.xml.bind']
  }
  //If this directory does not exist, tests will fail with a cryptic assert failure
  systemProperty 'kitInstallationPath', "$unzipKit.destinationDir/${project(':clustered:clustered-dist').archivesBaseName}-$project.version-kit"
  // Uncomment to include client logging in console output
  // testLogging.showStandardStreams = true
}

task compatTest(type: Test, dependsOn: [copyCompatServerLibs, compileTestJava]) {
  executable = Jvm.current().javaExecutable
  testClassesDir = sourceSets.test.output.classesDir
  // If you want to see all mutations of the voltron monitoring tree, add to JAVA_OPTS: -Dorg.terracotta.management.service.monitoring.VoltronMonitoringService.DEBUG=true
  environment 'JAVA_OPTS', '-Dcom.tc.l2.lockmanager.greedy.locks.enabled=false'
  //If this directory does not exist, tests will fail with a cryptic assert failure
  systemProperty 'kitInstallationPath', "$unzipCompatKit.destinationDir/${project(':clustered:clustered-dist').archivesBaseName}-$compatVersion-kit"
}

tasks.withType(JavaCompile) {
  options.compilerArgs += ['-Werror']
}

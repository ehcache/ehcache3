/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: this directory had to be named clustered-dist instead of just dist
 * because gradle creatively substitutes :dist for :clustered:dist or vice versa
 * if groups are the same
 * https://discuss.gradle.org/t/dependency-substitution-wrong-with-more-than-one-sub-project-with-same-name/7253/6
 */

plugins {
  id 'distribution'
  id 'org.ehcache.build.distribute'
}
group = 'org.ehcache'
archivesBaseName = 'ehcache-clustered'

ext {
  docsFolder = "$buildDir/docs/asciidoc"
}

dependencies {
  compileOnly(project(':clustered:client')) {
    exclude group: 'org.ehcache.modules', module: 'api'
    exclude group: 'org.terracotta', module: 'statistics'
  }
  // Needed because declared as provided in the different projects
  compileOnly "org.terracotta:runnel:$parent.terracottaPlatformVersion"
}

def kitProvides = { Configuration c ->
  c.exclude group:'org.slf4j', module:'slf4j-api'
  c.exclude group:'org.terracotta', module:'entity-server-api'
  c.exclude group:'org.terracotta', module:'entity-common-api'
  c.exclude group:'org.terracotta', module:'packaging-support'
  c.exclude group:'org.terracotta', module:'standard-cluster-services'
  c.exclude group:'org.terracotta', module:'statistics'
  c.exclude group:'org.terracotta', module:'runnel'
  c.exclude group:'org.terracotta', module:'client-message-tracker'
  c.exclude group:'org.terracotta.management', module:'monitoring-service-api'
  c.exclude group:'org.terracotta.management', module:'management-model'
  c.exclude group:'org.terracotta.management', module:'management-registry'
  c.exclude group:'org.terracotta.management', module:'cluster-topology'
  c.exclude group:'org.terracotta.management', module:'sequence-generator'
}

configurations {
  kit
  serverApis(kitProvides)
  serverLibs(kitProvides)
}

dependencies {
  compileOnly "org.terracotta.internal:client-runtime:$terracottaCoreVersion"
  compileOnly "org.terracotta:lease-api:$terracottaPlatformVersion"
  compileOnly "org.terracotta.dynamic-config.entities:dynamic-config-topology-entity-client:$terracottaPlatformVersion"

  serverApis project(':clustered:server:service-api')
  serverLibs project(':clustered:server:entity')
  serverLibs project(':clustered:server:service')

  kit "org.terracotta:platform-kit:$terracottaPlatformVersion@tar.gz"

  shadowCompile "org.slf4j:slf4j-api:$parent.slf4jVersion"
  pomOnlyCompile "org.ehcache:ehcache:$parent.baseVersion"
}

task copyDocs(type: Copy) {
  dependsOn asciidocZip
  from zipTree(asciidocZip.archivePath)
  into docsFolder
}

jar {
  bnd (
    'Bundle-SymbolicName': 'org.ehcache.clustered',
    'Export-Package': '!com.tc.*, !com.terracotta.*, !org.terracotta.*, !org.ehcache.*.internal.*, !sun.misc, ' +
      'org.ehcache.clustered.client.*, org.ehcache.clustered.common.*',
    'Import-Package': '!sun.misc.*, org.ehcache.xml.*;resolution:=optional, jdk.jfr.*;resolution:=optional, !com.fasterxml.jackson.*, !org.terracotta.json, *'
  )
}

distributions {
  main {
    baseName = archivesBaseName
    contents {
      filesMatching('**/*.jar') {
        // We can safely exclude JAR duplicates as our dependency strategy is fail on conflict
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
      }
      //tc kit
      into ('') {
        from configurations.kit.files.collect { tarTree(it) }
        eachFile { f ->
          // remove top level directory from the kit
          f.path = f.path.replace("platform-kit-$terracottaPlatformVersion/", "")
        }
        exclude { f ->
          // Exclude tc's README.txt - Issue 1273
          f.path.contains('README.txt') || f.path.contains('server/conf')
        }
        includeEmptyDirs = false
      }
      into ("server/plugins/api") {
        from configurations.serverApis
      }
      into ("server/plugins/lib") {
        from (configurations.serverLibs - configurations.serverApis)
      }
      into ('client/ehcache') {
        from jar
        from project(':dist').jar.archivePath.getPath()
        exclude { f ->
          !f.path.contains('ehcache') // do not add any transitives in this directory
        }
      }
      into ('client/ehcache/documentation') {
        from "$docsFolder/user"
      }
      into ('client/ehcache/javadoc') {
        from javadocJar.archivePath.getPath()
        from project(':dist').javadocJar.archivePath.getPath()
      }
      into ('client/lib') {
        from configurations.shadowCompile
      }
      into ('') {
        from 'src/assemble'
      }
    }
  }
}

distTar {
  archiveClassifier = 'kit'
  compression = Compression.GZIP
}

distZip {
  archiveClassifier = 'kit'
}

[distTar, distZip, installDist]*.dependsOn copyDocs, javadocJar, project(':dist').jar, project(':dist').javadocJar

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import aQute.bnd.osgi.Constants

/**
 * NOTE: this directory had to be named clustered-dist instead of just dist
 * because gradle creatively substitutes :dist for :clustered:dist or vice versa
 * if groups are the same
 * https://discuss.gradle.org/t/dependency-substitution-wrong-with-more-than-one-sub-project-with-same-name/7253/6
 */

plugins {
  id 'org.ehcache.build.package'
  id 'distribution'
}

publishing.publications.withType(MavenPublication) {
  pom {
    name = 'Ehcache 3 Clustered Module'
    description = 'Ehcache 3 Clustered: Defines the client jar and the kit containing the Terracotta server'
  }
}

ext {
  docsFolder = "$buildDir/docs/asciidoc"
}

configurations {
  [apiElements, runtimeElements].each {
    it.outgoing {
      variants.removeIf { it.name == 'classes' || it.name == 'resources' }
      capability "org.ehcache:ehcache-clustered:$version"
      capability "org.ehcache.modules.clustered:ehcache-client:$version"
    }
  }

  contents {
    exclude group:'org.ehcache.modules'
    exclude group:'org.slf4j'
  }
}

dependencies {
  contents project(':clustered:ehcache-client')
  contents "org.terracotta.internal:client-runtime:$terracottaCoreVersion"

  implementation "org.slf4j:slf4j-api:$parent.slf4jVersion"
  implementation project(':ehcache')
}

def kitProvides = { Configuration c ->
  c.exclude group:'org.slf4j', module:'slf4j-api'
  c.exclude group:'org.terracotta', module:'entity-server-api'
  c.exclude group:'org.terracotta', module:'entity-common-api'
  c.exclude group:'org.terracotta', module:'packaging-support'
  c.exclude group:'org.terracotta', module:'standard-cluster-services'
  c.exclude group:'org.terracotta', module:'statistics'
  c.exclude group:'org.terracotta', module:'runnel'
  c.exclude group:'org.terracotta', module:'client-message-tracker'
  c.exclude group:'org.terracotta.management', module:'monitoring-service-api'
  c.exclude group:'org.terracotta.management', module:'management-model'
  c.exclude group:'org.terracotta.management', module:'management-registry'
  c.exclude group:'org.terracotta.management', module:'cluster-topology'
  c.exclude group:'org.terracotta.management', module:'sequence-generator'
}

configurations {
  kit
  serverApis(kitProvides)
  serverLibs(kitProvides)
}

dependencies {
  serverApis project(':clustered:server:ehcache-service-api')
  serverLibs project(':clustered:server:ehcache-entity')
  serverLibs project(':clustered:server:ehcache-service')

  kit "org.terracotta.internal:terracotta-kit:$terracottaCoreVersion@tar.gz"
  kit "org.terracotta:platform-kit:$terracottaPlatformVersion@tar.gz"
}

task copyDocs(type: Sync) {
  dependsOn asciidocZip
  from zipTree(asciidocZip.archivePath)
  into docsFolder
}

javadoc {
  exclude '**/core/**', '**/impl/**', '**/xml/**', '**/jsr107/**', '**/transactions/**', '**/management/**', '**/tck/**'
}

tasks.named('jar') {
  osgi {
    instruction Constants.BUNDLE_SYMBOLICNAME, 'org.ehcache.clustered'
    instruction Constants.EXPORT_PACKAGE, '!com.tc.*, !com.terracotta.*, !org.terracotta.*, !org.ehcache.*.internal.*, !sun.misc, org.ehcache.clustered.client.*, org.ehcache.clustered.common.*'
    instruction Constants.IMPORT_PACKAGE, '!sun.misc.*, org.ehcache.xml.*;resolution:=optional, jdk.jfr.*;resolution:=optional, !com.fasterxml.jackson.*, !org.terracotta.json, javax.xml.bind*;version="[2.2,3)", *'
  }
}

distributions {
  main {
    distributionBaseName = archivesBaseName
    contents {
      filesMatching('**/*.jar') {
        // We can safely exclude JAR duplicates as our dependency strategy is fail on conflict
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
      }
      //tc kit
      into ('') {
        from(configurations.kit.elements.map {
          files -> files.collect { tarTree(it) }
        }) {
          // remove top level directories from the kits
          eachFile(dropTopLevelDirectories(1))
        }
        exclude { f ->
          // Exclude tc's README.txt - Issue 1273
          f.path.contains('README.txt') || f.path.contains('server/conf')
        }
        includeEmptyDirs = false
      }
      into ("server/plugins/api") {
        from configurations.serverApis
      }
      into ("server/plugins/lib") {
        from (configurations.serverLibs - configurations.serverApis)
      }
      into ('client/ehcache') {
        from jar
        from project(':ehcache').jar
        exclude { f ->
          !f.path.contains('ehcache') // do not add any transitives in this directory
        }
      }
      into ('client/ehcache/documentation') {
        from "$docsFolder/user"
      }
      into ('client/ehcache/javadoc') {
        from tasks.named('javadocJar')
        from project(':ehcache').javadocJar
      }
      into ('client/lib') {
        from configurations.runtimeClasspath
      }
      into ('') {
        from 'src/assemble'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
      }
    }
  }
}

distTar {
  archiveClassifier = 'kit'
  compression = Compression.GZIP
}

distZip {
  archiveClassifier = 'kit'
}

tasks.register('distDir', Sync) {
  description = 'Creates an expanded kit'
  into("${project.buildDir}/kit")
  with(distributions.main.contents)
}

artifacts {
  add(configurations.kit.name, tasks.named('distDir', Sync).map {
    copy -> copy.destinationDir
  })
}

publishing.publications.withType(MavenPublication) {
  artifact distZip
  artifact distTar
}

[distTar, distZip, distDir, installDist]*.dependsOn copyDocs, javadocJar, project(':ehcache').jar, project(':ehcache').javadocJar

static Action<FileCopyDetails> dropTopLevelDirectories(int count) {
  { fcd ->
    RelativePath original = fcd.getRelativeSourcePath()
    def originalSegments = original.segments
    if (count >= originalSegments.length) {
      if (original.isFile()) {
        throw new IllegalStateException("Cannot drop ${count} ${(count > 1 ? 'directories' : 'directory')} from ${original}")
      } else {
        fcd.exclude()
      }
    } else {
      def head = fcd.relativePath.segments.dropRight(originalSegments.length)
      def tail = originalSegments.drop(count)
      fcd.setRelativePath(new RelativePath(original.isFile(), (head + tail) as String[]))
    }
  }
}

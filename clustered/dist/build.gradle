/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group = 'org.ehcache'
archivesBaseName = 'ehcache-clustered'

apply plugin: 'distribution'

configurations {
  kit
  serverLibs
}

dependencies {
  compile project(':api')
  compile project(':core')
  compile project(':impl')
  compile project(':107')
  compile project(':xml')
  compile project(':transactions')
  compile project(':clustered:client')
  compile project(':clustered:common')
  compile "org.terracotta.internal:client-runtime:$terracottaCoreVersion" changing true

  serverLibs(project(':clustered:server')) {
    exclude group: 'org.terracotta', module: 'entity-server-api'
    exclude group: 'org.terracotta', module: 'entity-common-api'
    exclude group: 'org.terracotta', module: 'packaging-support'
    exclude group: 'org.terracotta.internal', module: 'tc-config-parser'
  }
  serverLibs "org.terracotta:coordinator-entity-server:$parent.coordinatorVersion" changing true

  kit "org.terracotta.internal:terracotta-kit:$terracottaCoreVersion@zip" changing true
}

apply plugin: EhDistribute

dependencies {
  shadow "org.slf4j:slf4j-api:$parent.slf4jVersion"
  shadowProvided 'javax.transaction:jta:1.1', 'org.codehaus.btm:btm:2.1.4'
}

distributions {
  main {
    baseName = archivesBaseName
    contents {
      into ('') {
        from configurations.kit.files.collect { zipTree(it) }
      }
      into ("terracotta-$terracottaCoreVersion/plugins/lib") {
        from configurations.serverLibs
      }
      into ('client') {
        from jar
      }
    }
  }
}

distTar {
  classifier = 'kit'
  compression = Compression.GZIP
}

distZip {
  classifier = 'kit'
}

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'org.openrepose.gradle.plugins.jaxb' version '2.5.0'
}

apply plugin: EhDeploy

dependencies {
  compile project(':api'), project(':core'), project(':impl')
  testCompile 'org.xmlunit:xmlunit-core:2.6.0', 'org.xmlunit:xmlunit-matchers:2.6.0'
  jaxb 'org.glassfish.jaxb:jaxb-xjc:2.2.11'
  jaxb 'org.glassfish.jaxb:jaxb-runtime:2.2.11'
  xjc 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
}

test {
  if (testJava.javaVersion.isJava9Compatible()) {
    jvmArgs += ['--add-modules', 'java.xml.bind']
  }
}

def generatedDir = "${buildDir}/xjc/generated-sources"

jaxb {
  xsdDir = "src/main/resources"
  bindingsDir = 'src/main/resources'
  xjc {
    destinationDir = generatedDir
    generateEpisodeFiles = false
    generatePackage = 'org.ehcache.xml.model'
    extension = true
    args = ['-Xfluent-api']
  }
}

sourceSets {
  generated {
    java {
      srcDirs += generatedDir
    }
  }
  main {
    compileClasspath += files([sourceSets.generated.java.outputDir])
    runtimeClasspath += files([sourceSets.generated.java.outputDir])
  }
  test {
    compileClasspath += files([sourceSets.generated.java.outputDir])
    runtimeClasspath += files([sourceSets.generated.java.outputDir])
  }
  integrationTest {
    compileClasspath += files([sourceSets.generated.java.outputDir])
    runtimeClasspath += files([sourceSets.generated.java.outputDir])
  }
}

compileGeneratedJava {
  options.compilerArgs = ['-Xlint:unchecked,deprecation']
  dependsOn xjc
}

compileJava {
  dependsOn compileGeneratedJava
}

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import scripts.*

ext {
  baseVersion = '3.1.1-SNAPSHOT'
  offheapVersion = '2.2.2'
  managementVersion = '5.0.3.beta'
  statisticVersion = '1.1.0'
  jcacheVersion = '1.0.0'
  slf4jVersion = '1.7.7'
  sizeofVersion = '0.3.0'

  utils = new Utils(baseVersion, logger)
  isReleaseVersion = !baseVersion.endsWith('SNAPSHOT')
  isCloudbees = System.getenv('JENKINS_URL')?.contains('cloudbees')
  logger.info("Is cloudbees? $isCloudbees")
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  group = 'org.ehcache.modules'
  version = baseVersion

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories {
    mavenCentral()
    maven { url "http://repo.terracotta.org/maven2" }
  }

  sourceSets {
    slowTest {
      java.srcDir 'src/slow-test/java'
      resources.srcDir 'src/slow-test/resources'
      compileClasspath += sourceSets.test.compileClasspath
      runtimeClasspath += sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_7) >= 0) {
      compileOnly 'com.google.code.findbugs:annotations:3.0.0'
    } else {
      compileOnly 'com.google.code.findbugs:annotations:2.0.3'
    }
    testCompile 'junit:junit:4.11', 'org.hamcrest:hamcrest-library:1.3', 'org.mockito:mockito-core:1.9.5'
    testRuntime "org.slf4j:slf4j-simple:$parent.slf4jVersion"
  }

  jar {
    utils.fillManifest(manifest,"ehcache-${project.name}")
    from "$rootDir/LICENSE"
  }

  test {
    maxHeapSize = "512m"
    systemProperty 'java.awt.headless', 'true'
    if (parent.isCloudbees) {
      systemProperty 'disable.concurrent.tests', 'true'
    }
  }

  task slowTest(type: Test) {
    testClassesDir = sourceSets.slowTest.output.classesDir
    classpath += sourceSets.slowTest.runtimeClasspath

    binResultsDir file("$buildDir/slow-tests-results/binary/$name")
    reports.junitXml.destination = "$buildDir/slow-tests-results"
    reports.html.destination = "$buildDir/reports/slow-tests"
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  javadoc {
    title "$project.archivesBaseName $project.version API"
    exclude '**/internal/**'
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
    configProperties = ['projectDir':projectDir, 'rootDir':rootDir]
    toolVersion = '5.7'
  }

  findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_7) >= 0) {
      findbugs.toolVersion = '3.0.1'
    } else {
      findbugs.toolVersion = '2.0.3'
    }
  }

  jacoco {
    toolVersion = '0.7.1.201405082137'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }
}

allprojects {
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}

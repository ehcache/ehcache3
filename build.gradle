subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'eclipse'

  group = 'org.ehcache.modules'
  version = '3.0.0-SNAPSHOT'

  ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.6

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile 'junit:junit:4.11', 'org.hamcrest:hamcrest-library:1.3'
  }

  jar {
    manifest.attributes(
            'provider': 'gradle',
            'Implementation-Title': "ehcache-${project.name}",
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    )
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
    sign configurations.archives
  }

  def pomFiller = {
    name project.subPomName
    description project.subPomDesc
    url 'http://ehcache.org'
    organization {
      name 'Terraccotta'
      url 'http://terracotta.org'
    }
    issueManagement {
      system 'Github'
      url 'https://github.com/ehcache/ehcache3/issues'
    }
    scm {
      url 'https://github.com/ehcache/ehcache3'
      connection 'scm:git:https://github.com/ehcache/ehcache3.git'
      developerConnection 'scm:git:git@github.com:ehcache/ehcache3.git'
    }
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
  }

  install {
    repositories.mavenInstaller {
      pom.project pomFiller
    }
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

        if (isReleaseVersion) {
          repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        } else {
          repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        }

        pom.project pomFiller

      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

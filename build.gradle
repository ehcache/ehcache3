/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import scripts.*
import org.gradle.internal.jvm.Jvm

plugins {
  // This adds tasks to auto close or release nexus staging repos
  // see https://github.com/Codearte/gradle-nexus-staging-plugin/
  id 'io.codearte.nexus-staging' version '0.9.0'
  // This adds the ability to print a taskTree
  // ./gradlew <task1> ... <taskN> taskTree
  id "com.dorongold.task-tree" version "1.3"
}

if (deployUrl.contains('nexus')) {
  //internal terracotta config, shorten url for this plugin to end at local/
  project.nexusStaging {
    serverUrl = deployUrl.replaceAll(~/local\/.*$/, "local/")
    packageGroup = 'Ehcache OS' //internal staging repository name
  }
  ext {
    deployUser = tcDeployUser
    deployPwd = tcDeployPassword
  }
} else {
  project.nexusStaging {
    packageGroup = 'org.ehcache' //Sonatype staging repository name
  }
  ext {
    deployUser = sonatypeUser
    deployPwd = sonatypePwd
  }
}

project.nexusStaging {
  username = project.ext.deployUser
  password = project.ext.deployPwd
  logger.warn("Nexus Staging: Using login ${username} and url ${serverUrl}")
}

// Disable automatic promotion for added safety
closeAndReleaseRepository.enabled = false


ext {

  baseVersion = findProperty('overrideVersion') ?: '3.5.0-SNAPSHOT'

  // Third parties
  offheapVersion = '2.3.2'
  statisticVersion = '1.4.3'
  jcacheVersion = '1.0.0'
  slf4jVersion = '1.7.7'
  sizeofVersion = '0.3.0'
  ehcache2Version = '2.10.3'

  // Clustered
  terracottaPlatformVersion = '5.3.5'
  managementVersion = terracottaPlatformVersion
  terracottaApisVersion = '1.3.1'
  terracottaCoreVersion = '5.3.6'
  offheapResourceVersion = terracottaPlatformVersion
  entityApiVersion = terracottaApisVersion
  terracottaPassthroughTestingVersion = '1.3.2'
  entityTestLibVersion = terracottaPassthroughTestingVersion

  // Tools
  findbugsVersion = '3.0.1'

  utils = new Utils(baseVersion, logger)
  isReleaseVersion = !baseVersion.endsWith('SNAPSHOT')
  isCloudbees = System.getenv('JENKINS_URL')?.contains('cloudbees')
}


// Java 6 build setup
assert (JavaVersion.current().isJava8Compatible()) : 'The Ehcache 3 build requires Java 8+ to run'
ext {
  testJava = Jvm.current()
}

if (hasProperty('testVM')) {
  switch (testVM) {
    case '8':
      if (JavaVersion.current().isJava8()) {
        testJava = Jvm.current()
      } else {
        assert hasProperty('java8Home') : 'Set the poperty \'java8Home\' in your $HOME/.gradle/gradle.properties pointing to a Java 8 installation'
        testJava = Jvm.discovered(new File(java8Home), JavaVersion.VERSION_1_8)
      }
      break
    case '9':
      if (JavaVersion.current().isJava9()) {
        testJava = Jvm.current()
      } else {
        assert hasProperty('java9Home'): 'Set the poperty \'java9Home\' in your $HOME/.gradle/gradle.properties pointing to a Java 9 installation'
        testJava = Jvm.discovered(new File(java9Home), JavaVersion.VERSION_1_9)
      }
      break
    default:
      throw new AssertionError("Unrecognized 'testVM' value $testVM - Accepted values are 8 or 9")
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  group = 'org.ehcache.modules'
  version = baseVersion

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    if (project.hasProperty('mvnlocal')) {
      mavenLocal()
    }
    mavenCentral()
    maven { url "http://repo.terracotta.org/maven2" }
  }

  sourceSets {
    slowTest {
      java.srcDir 'src/slow-test/java'
      resources.srcDir 'src/slow-test/resources'
      compileClasspath += sourceSets.test.compileClasspath
      runtimeClasspath += sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    compileOnly "com.google.code.findbugs:annotations:$parent.findbugsVersion"
    testCompileOnly "com.google.code.findbugs:annotations:$parent.findbugsVersion"
    testCompile 'junit:junit:4.12', 'org.assertj:assertj-core:3.8.0', 'org.hamcrest:hamcrest-library:1.3'
    testCompile('org.mockito:mockito-core:2.10.0') {
      exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    testRuntime "org.slf4j:slf4j-simple:$parent.slf4jVersion"
  }

  jar {
    utils.fillManifest(manifest,"ehcache-${project.name}")
    from "$rootDir/LICENSE"
  }

  test {
    maxHeapSize = "1408m"
    systemProperty 'java.awt.headless', 'true'
    if (parent.isCloudbees) {
      systemProperty 'disable.concurrent.tests', 'true'
    }
  }

  task slowTest(type: Test) {
    testClassesDirs = sourceSets.slowTest.output.classesDirs
    classpath += sourceSets.slowTest.runtimeClasspath

    binResultsDir file("$buildDir/slow-tests-results/binary/$name")
    reports.junitXml.destination = file("$buildDir/slow-tests-results")
    reports.html.destination = file("$buildDir/reports/slow-tests")
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  javadoc {
    title "$project.archivesBaseName $project.version API"
    exclude '**/internal/**'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
    configProperties = ['projectDir':projectDir, 'rootDir':rootDir]
    toolVersion = '5.9'
  }

  findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    findbugs.toolVersion = parent.findbugsVersion
  }

  findbugsMain {
    reports {
      // Switch from xml to html by changing these flags
      xml.enabled = true
      html.enabled = false
    }
  }

  jacoco {
    toolVersion = '0.7.9'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }

  tasks.withType(AbstractCompile) {
    options.with {
      fork = true
    }
  }
  tasks.withType(Test) {
    executable = testJava.javaExecutable
  }
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  configurations.all {
    resolutionStrategy {
      failOnVersionConflict()
    }
  }
}

allprojects {
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked']
  }
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import scripts.*
import org.gradle.internal.jvm.Jvm

plugins {
  // This adds tasks to auto close or release nexus staging repos
  // see https://github.com/Codearte/gradle-nexus-staging-plugin/
  id 'io.codearte.nexus-staging' version '0.9.0'
  // Declare spotbugs at the top
  id 'com.github.spotbugs' version '1.6.3' apply false
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

if (deployUrl.contains('nexus')) {
  //internal terracotta config, shorten url for this plugin to end at local/
  project.nexusStaging {
    serverUrl = deployUrl.replaceAll(~/local\/.*$/, "local/")
    packageGroup = 'Ehcache OS' //internal staging repository name
  }
  ext {
    deployUser = tcDeployUser
    deployPwd = tcDeployPassword
  }
} else {
  project.nexusStaging {
    packageGroup = 'org.ehcache' //Sonatype staging repository name
  }
  ext {
    deployUser = sonatypeUser
    deployPwd = sonatypePwd
  }
}

project.nexusStaging {
  username = project.ext.deployUser
  password = project.ext.deployPwd
  logger.debug("Nexus Staging: Using login ${username} and url ${serverUrl}")
}

// Disable automatic promotion for added safety
closeAndReleaseRepository.enabled = false


ext {

  baseVersion = findProperty('overrideVersion') ?: ehcacheVersion

  utils = new Utils(baseVersion, logger)
  isReleaseVersion = !baseVersion.endsWith('SNAPSHOT')
  isCloudbees = System.getenv('JENKINS_URL')?.contains('cloudbees')
}


assert (JavaVersion.current().isJava8Compatible()) : 'The Ehcache 3 build requires Java 8+ to run'
ext {
  testJava = Jvm.current()
}

if (hasProperty('testVM')) {
  testJava = Utils.jvmForHome(new File(testVM))
  println "Using Test JVM $testJava [Version: $testJava.javaVersion.majorVersion]"
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'jacoco'

  group = 'org.ehcache.modules'
  version = baseVersion

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    if (project.hasProperty('mvnlocal')) {
      mavenLocal()
    }
    mavenCentral()
    maven { url "http://repo.terracotta.org/maven2" }
  }

  sourceSets {
    slowTest {
      java.srcDir 'src/slow-test/java'
      resources.srcDir 'src/slow-test/resources'
      compileClasspath += sourceSets.test.compileClasspath
      runtimeClasspath += sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    implementation "org.slf4j:slf4j-api:$parent.slf4jVersion"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$parent.spotbugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$parent.spotbugsVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testCompile 'org.xmlunit:xmlunit-core:2.6.0', 'org.xmlunit:xmlunit-matchers:2.6.0'
    testRuntimeOnly "org.slf4j:slf4j-simple:$parent.slf4jVersion"
  }

  jar {
    utils.fillManifest(manifest,"ehcache-${project.name}")
    from "$rootDir/LICENSE"
  }

  test {
    maxHeapSize = "1408m"
    systemProperty 'java.awt.headless', 'true'
    if (parent.isCloudbees) {
      systemProperty 'disable.concurrent.tests', 'true'
    }
  }

  task slowTest(type: Test) {
    testClassesDirs = sourceSets.slowTest.output.classesDirs
    classpath += sourceSets.slowTest.runtimeClasspath

    binResultsDir file("$buildDir/slow-tests-results/binary/$name")
    reports.junitXml.destination = file("$buildDir/slow-tests-results")
    reports.html.destination = file("$buildDir/reports/slow-tests")
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  javadoc {
    title "$project.archivesBaseName $project.version API"
    exclude '**/internal/**'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
    configProperties = ['projectDir':projectDir, 'rootDir':rootDir]
    toolVersion = checkstyleVersion
  }

  spotbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    toolVersion = spotbugsVersion
  }

  spotbugsMain {
    reports {
      // Switch from xml to html by changing these flags
      xml.enabled = true
      html.enabled = false
    }
  }

  jacoco {
    toolVersion = jacocoVersion
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }

  tasks.withType(AbstractCompile) {
    options.with {
      fork = true
    }
  }
  tasks.withType(Test) {
    executable = testJava.javaExecutable
  }
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  configurations.all {
    resolutionStrategy {
      failOnVersionConflict()
      // If you want to override a dependency, instead of changing gradle.properties, use something like below
      // force 'org.terracotta:statistics:2.0-SNAPSHOT'
    }
  }
}

allprojects {
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Werror', '-Xlint:all']
  }
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  group = 'org.ehcache.modules'
  version = '3.0.0-SNAPSHOT'

  ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.6

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.terracotta.org/maven2" } 
  }

  sourceSets {
    integrationTest {
      java.srcDir 'src/integration-test/java'
      resources.srcDir 'src/integration-test/resources'
      compileClasspath += sourceSets.test.compileClasspath
      runtimeClasspath += sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    testCompile 'junit:junit:4.11', 'org.hamcrest:hamcrest-library:1.3', 'org.mockito:mockito-core:1.9.5'
  }

  jar {
    manifest.attributes(
            'provider': 'gradle',
            'Implementation-Title': "ehcache-${project.name}",
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    )
  }

  task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath

    binResultsDir file("$buildDir/integration-tests-results/binary/$name")
    reports.junitXml.destination = "$buildDir/integration-tests-results"
    reports.html.destination = "$buildDir/reports/integration-tests"
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
    sign configurations.archives
  }

  def pomFiller = {
    name project.subPomName
    description project.subPomDesc
    url 'http://ehcache.org'
    organization {
      name 'Terraccotta'
      url 'http://terracotta.org'
    }
    issueManagement {
      system 'Github'
      url 'https://github.com/ehcache/ehcache3/issues'
    }
    scm {
      url 'https://github.com/ehcache/ehcache3'
      connection 'scm:git:https://github.com/ehcache/ehcache3.git'
      developerConnection 'scm:git:git@github.com:ehcache/ehcache3.git'
    }
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
  }

  install {
    repositories.mavenInstaller {
      pom.project pomFiller
    }
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

        if (isReleaseVersion) {
          repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        } else {
          repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        }

        pom.project pomFiller

      }
    }
  }

  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
    configProperties = ['projectDir':projectDir]
    toolVersion = '5.7'
  }

  findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    excludeFilter = file("$projectDir/config/findbugs-excludes.xml")
    toolVersion = '2.0.3'
  }

  jacoco {
    toolVersion = '0.7.1.201405082137'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.1'
}

/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import scripts.*

ext {
  baseVersion = '3.0.0-SNAPSHOT'
  offheapVersion = '2.1.2'
  managementVersion = '2.1.0'
  statisticVersion = '1.1.0'
  jcacheVersion = '1.0.0'
  slf4jVersion = '1.7.7'
  sizeofVersion = '0.3.0'

  utils = new Utils(version: baseVersion)
  isReleaseVersion = !baseVersion.endsWith('SNAPSHOT')
}

buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  group = 'org.ehcache.modules'
  version = baseVersion

  archivesBaseName = "ehcache-${project.name}"

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories {
    mavenCentral()
    maven { url "http://repo.terracotta.org/maven2" }
    mavenLocal()
  }

  sourceSets {
    slowTest {
      java.srcDir 'src/slow-test/java'
      resources.srcDir 'src/slow-test/resources'
      compileClasspath += sourceSets.test.compileClasspath
      runtimeClasspath += sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_7) >= 0) {
      compile 'com.google.code.findbugs:annotations:3.0.0'
    } else {
      compile 'com.google.code.findbugs:annotations:2.0.3'
    }
    testCompile 'junit:junit:4.11', 'org.hamcrest:hamcrest-library:1.3', 'org.mockito:mockito-core:1.9.5'
    testRuntime "org.slf4j:slf4j-simple:$parent.slf4jVersion"
  }

  jar {
    utils.fillManifest(manifest,"ehcache-${project.name}")
  }

  task slowTest(type: Test) {
    testClassesDir = sourceSets.slowTest.output.classesDir
    classpath += sourceSets.slowTest.runtimeClasspath

    binResultsDir file("$buildDir/slow-tests-results/binary/$name")
    reports.junitXml.destination = "$buildDir/slow-tests-results"
    reports.html.destination = "$buildDir/reports/slow-tests"
  }

  task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  artifacts {
    archives jar

    archives javadocJar
    archives sourceJar
  }

  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
    configProperties = ['projectDir':projectDir, 'rootDir':rootDir]
    toolVersion = '5.7'
  }

  findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_7) >= 0) {
      findbugs.toolVersion = '3.0.1'
    } else {
      findbugs.toolVersion = '2.0.3'
    }
  }

  jacoco {
    toolVersion = '0.7.1.201405082137'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }
}

configure(allprojects.findAll({ p -> p.ext.properties.deploy })) {
  apply plugin: 'signing'
  apply plugin: 'maven'

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

        if (isReleaseVersion) {
          repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        } else {
          repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        }
      }
    }
  }

  def installer = install.repositories.mavenInstaller
  def deployer = uploadArchives.repositories.mavenDeployer

  [installer, deployer]*.pom*.whenConfigured {pom ->
    utils.pomFiller(pom, project.subPomName, project.subPomDesc)
  }
}

configure(allprojects.findAll({ p -> p.ext.properties.distribution })) {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'com.github.johnrengelman.shadow'

  def OSGI_OVERRIDE_KEYS = ['Import-Package', 'Export-Package', 'Private-Package', 'Tool', 'Bnd-LastModified', 'Created-By', 'Require-Capability']

  configurations {
      shadowProvided
  }

  shadowJar {
    baseName = "$archivesBaseName-shadow"
    classifier = ''
    dependencies {
      exclude({ rdep -> !['org.ehcache', 'org.terracotta'].any({ prefix -> rdep.moduleGroup.startsWith(prefix) })})
    }
    mergeServiceFiles()
  }

  jar {
    dependsOn shadowJar
    from(project.zipTree(project.shadowJar.archivePath.getPath())) {
      exclude("META-INF/MANIFEST.MF")
    }
  }

  jar.doFirst {
    manifest = new com.github.jengelman.gradle.plugins.shadow.tasks.DefaultInheritManifest(getServices().get(org.gradle.api.internal.file.FileResolver.class))
    manifest.inheritFrom shadowJar.manifest
    utils.fillManifest(manifest, archivesBaseName)

    def osgiConvention = new OsgiPluginConvention(project)
    def osgiManifest = osgiConvention.osgiManifest {
      classesDir = shadowJar.archivePath
      classpath = files(configurations.shadow, project.configurations.shadowProvided)

      // Metadata
      instructionReplace 'Bundle-Name', 'Ehcache 3'
      instructionReplace 'Bundle-SymbolicName', "org.ehcache.$archivesBaseName"
      instruction 'Bundle-Description', 'Ehcache is an open-source caching library, compliant with the JSR-107 standard.'
      instruction 'Bundle-DocURL', 'http://ehcache.org'
      instruction 'Bundle-License', 'LICENSE'
      instruction 'Bundle-Vendor', 'Terracotta Inc., a wholly-owned subsidiary of Software AG USA, Inc.'
      instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'

      configurations.compile.dependencies.withType(ProjectDependency).dependencyProject.findAll({p -> p.ext.properties.osgi}).each{ prop ->
        new groovy.json.JsonSlurper().parseText(prop.ext.properties.osgi).each {
          instruction(it.key, *it.value)
        }
      }

      instruction 'Export-Package', '*'
      instruction 'Import-Package', '*'
    }
    manifest.inheritFrom(osgiManifest) {
      eachEntry {
        if (it.getKey().startsWith('Bundle') || OSGI_OVERRIDE_KEYS.contains(it.getKey())) {
          it.setValue(it.getMergeValue())
        } else {
          it.setValue(it.getBaseValue())
        }
      }
    }
  }

  sourceJar {
    from configurations.compile.allDependencies.withType(ProjectDependency).dependencyProject.flatten {
      it.sourceSets.main.allSource
    }
  }

  javadoc {
    def componentProjects = configurations.compile.dependencies.withType(ProjectDependency).dependencyProject
    dependsOn componentProjects.javadoc
    title "$archivesBaseName $version API"
    source componentProjects.javadoc.source
    classpath = files(componentProjects.javadoc.classpath)
  }

  task asciidocZip(type: Zip, dependsOn: ':docs:asciidoctor') {
    classifier = 'docs'
    from tasks.getByPath(':docs:asciidoctor').outputDir
  }

  artifacts {
    archives asciidocZip
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
    sign configurations.archives
  }

  def artifactFiltering = {
    pom.scopeMappings.mappings.remove(project.configurations.compile)
    pom.scopeMappings.mappings.remove(project.configurations.runtime)
    pom.scopeMappings.mappings.remove(project.configurations.testCompile)
    pom.scopeMappings.mappings.remove(project.configurations.testRuntime)
    pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
    pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadowProvided, Conf2ScopeMappingContainer.PROVIDED)
    utils.pomFiller(pom, 'Ehcache', 'Ehcache single jar, containing all modules')
  }

  install {
    repositories.mavenInstaller artifactFiltering
  }

  uploadArchives {
    repositories {
      mavenDeployer ({
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

        if (isReleaseVersion) {
          repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        } else {
          repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUser, password: sonatypePwd)
          }
        }
      } << artifactFiltering)
    }
  }
}

allprojects {
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}
